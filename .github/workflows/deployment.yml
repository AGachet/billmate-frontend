name: Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string
        default: 'latest'
  repository_dispatch:
    types:
      - deployment

jobs:
  check-tests:
    name: Check if tests passed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Check test status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Check if tests have passed for this specific commit
            gh run list --workflow=test.yml --branch=master --status=success --limit=1 --commit=${{ github.sha }}
            if [ $? -ne 0 ]; then
              echo "Tests have not passed for commit ${{ github.sha }}. Deployment blocked."
              exit 1
            fi
          fi

      - name: Print last failed test run
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Last 5 test runs:"
          gh run list --workflow=test.yml --limit=5
          echo "Detailed logs of the last failed run:"
          LAST_FAILED_RUN=$(gh run list --workflow=test.yml --status=failure --limit=1 --json databaseId --jq '.[0].databaseId')
          if [ ! -z "$LAST_FAILED_RUN" ]; then
            gh run view $LAST_FAILED_RUN --log
          fi

  docker-push:
    name: Push Docker image to GHCR
    needs: check-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.package-version.outputs.version }}
            type=raw,value=latest
            type=sha,format=short

      - name: Show tags before push
        run: |
          echo "Tags that will be applied:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Current images and their tags:"
          docker images ghcr.io/${{ github.repository }} --format "{{.ID}} {{.Repository}}:{{.Tag}}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show tags after push
        run: |
          echo "Images and their tags after push:"
          docker images ghcr.io/${{ github.repository }} --format "{{.ID}} {{.Tag}}"

  deploy-to-nas:
    name: Deploy to NAS
    needs: [docker-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version from package.json: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CI_DEPLOY_NAS_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host cinas-ext\n  HostName ${{ secrets.NAS_HOST }}\n  Port ${{ secrets.NAS_PORT }}\n  User ${{ secrets.NAS_USER }}\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Setup NAS directories
        run: |
          # Create base directory with proper permissions
          ssh cinas-ext "mkdir -p ${{ secrets.NAS_FRONTEND_PATH }} && chmod 755 ${{ secrets.NAS_FRONTEND_PATH }}"

          # Create nginx configuration directory and logs directory
          ssh cinas-ext "mkdir -p ${{ secrets.NAS_FRONTEND_PATH }}/nginx/logs && chmod 755 ${{ secrets.NAS_FRONTEND_PATH }}/nginx/logs"

      - name: Check nginx configuration
        run: |
          if [ ! -f "nginx.conf" ]; then
            echo "Error: nginx.conf file is missing in the repository"
            exit 1
          fi

      - name: Check Docker version on NAS
        run: |
          DOCKER_VERSION=$(ssh cinas-ext '/usr/local/bin/docker --version')
          echo "Docker version on NAS: $DOCKER_VERSION"
          if ! ssh cinas-ext '/usr/local/bin/docker info >/dev/null 2>&1'; then
            echo "Docker daemon is not running on NAS"
            exit 1
          fi

      - name: Deploy frontend container
        run: |
          # Function to check SSH command status
          check_ssh_status() {
            if [ $? -ne 0 ]; then
              echo "Error executing SSH command: $1"
              echo "Last command failed: $2"
              exit 1
            fi
          }

          # Set version variables once at the beginning
          REPO="$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          VERSION="${{ steps.package-version.outputs.version }}"
          SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "Using repository: ${REPO}, version: ${VERSION}, SHA: ${SHA_SHORT}"

          # Verify version is not empty
          if [ -z "$VERSION" ]; then
            echo "ERROR: Version is empty! Using default version 0.0.0"
            VERSION="0.0.0"
          fi

          # Debug package.json content
          echo "Package.json content:"
          cat package.json | grep version

          # Update local docker-compose.yml to use both version and short SHA for uniqueness
          echo "Updating local docker-compose.yml..."
          # Use version tag for usual tracking, but docker will always fetch the latest image with this tag
          sed -i.bak "s|image:.*|image: ghcr.io/${REPO}:${VERSION}|" docker-compose.yml
          echo "Updated docker-compose.yml content:"
          cat docker-compose.yml

          # Create network if it doesn't exist
          echo "Creating network if it doesn't exist..."
          ssh cinas-ext "/usr/local/bin/docker network inspect billmate-network >/dev/null 2>&1 || /usr/local/bin/docker network create billmate-network"
          check_ssh_status "Network creation" "docker network inspect/create"

          # Backup current docker-compose.yml if it exists
          echo "Backing up docker-compose.yml..."
          ssh cinas-ext "if [ -f ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml ]; then cp ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml.backup; fi"
          check_ssh_status "Backup creation" "cp docker-compose.yml"

          # Copy docker-compose.yml
          echo "Copying docker-compose.yml to NAS..."
          cat docker-compose.yml | ssh cinas-ext "cat > ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml"
          check_ssh_status "File copy" "cat docker-compose.yml"

          # Verify docker-compose.yml content on NAS
          echo "Verifying docker-compose.yml content on NAS..."
          ssh cinas-ext "cat ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml"
          check_ssh_status "File verification" "cat docker-compose.yml"

          # Copy nginx configuration
          echo "Copying nginx configuration..."
          cat nginx.conf | ssh cinas-ext "cat > ${{ secrets.NAS_FRONTEND_PATH }}/nginx/default.conf"
          check_ssh_status "Nginx config copy" "cat nginx.conf"

          # Verify nginx configuration exists on NAS
          echo "Verifying nginx configuration..."
          ssh cinas-ext "test -f ${{ secrets.NAS_FRONTEND_PATH }}/nginx/default.conf"
          check_ssh_status "Nginx config verification" "test -f nginx/default.conf"

          # Create .env file from secrets
          echo "Creating .env file..."
          ssh cinas-ext "echo 'VITE_BASE_API_URL=${{ secrets.FRONTEND_API_URL }}' > ${{ secrets.NAS_FRONTEND_PATH }}/.env && \
          echo 'FRONTEND_PORT=3000' >> ${{ secrets.NAS_FRONTEND_PATH }}/.env"
          check_ssh_status "Env file creation" "echo > .env"

          # Check if deployment is possible
          echo "Checking if deployment is possible..."
          if ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose ps | grep -q 'frontend'"; then
            echo "Frontend is already running. Proceeding with deployment..."
          else
            echo "No frontend is currently running. Proceeding with fresh deployment..."
          fi

          # Set up environment variables
          echo "Setting up environment variables on NAS..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && export REPO=\"${REPO}\" && export VERSION=\"${VERSION}\""
          check_ssh_status "Environment setup" "Setting environment variables"

          # Stop the current container
          echo "Stopping current container..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose down"
          check_ssh_status "Container shutdown" "docker-compose down"

          # Check docker-compose.yml for validity
          echo "Checking docker-compose.yml for validity..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && cat docker-compose.yml && /usr/local/bin/docker-compose config"
          check_ssh_status "Docker compose validation" "docker-compose config"

          # Before starting container, ensure we have the latest image version
          echo "Ensuring we have the latest image version..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker pull ghcr.io/${REPO}:${VERSION}"
          check_ssh_status "Image pull" "docker pull"

          # Start the new container
          echo "Starting new container..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose up -d"
          check_ssh_status "Container startup" "docker-compose up -d"

          # Clean up unused containers
          echo "Cleaning up unused containers..."
          ssh cinas-ext "/usr/local/bin/docker container prune -f"
          check_ssh_status "Container cleanup" "docker container prune"

          # Explain the cleanup strategy
          echo "Cleanup strategy: We keep only the current version (${VERSION}) and remove all other tagged and dangling images related to ${REPO}"

          # Remove tagged images with different versions
          echo "Removing old tagged images..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && \
            OLD_IMAGES=\$(/usr/local/bin/docker images \"ghcr.io/${REPO}\" --format '{{.Repository}}:{{.Tag}}' | grep -v \"${VERSION}\") && \
            if [ ! -z \"\$OLD_IMAGES\" ]; then \
              echo \"Removing old tagged images: \$OLD_IMAGES\" && \
              echo \"\$OLD_IMAGES\" | xargs -r /usr/local/bin/docker rmi; \
            else \
              echo \"No old tagged images to remove\"; \
            fi"
          check_ssh_status "Old tagged image removal" "docker rmi old tagged images"

          # Find and clean dangling images only related to our repository
          echo "Removing dangling images from our repository..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && \
            # Identify all dangling images
            DANGLING_IDS=\$(/usr/local/bin/docker images --filter \"dangling=true\" --format '{{.ID}}') && \
            if [ ! -z \"\$DANGLING_IDS\" ]; then \
              # For each dangling image, check if it's ours by inspecting it
              for IMG_ID in \$DANGLING_IDS; do \
                if /usr/local/bin/docker inspect \$IMG_ID | grep -q \"ghcr.io/${REPO}\"; then \
                  echo \"Removing dangling image \$IMG_ID from our repository\" && \
                  /usr/local/bin/docker rmi \$IMG_ID; \
                fi; \
              done; \
            else \
              echo \"No dangling images found\"; \
            fi"
          check_ssh_status "Dangling image removal" "docker rmi dangling images"

          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          for i in {1..30}; do
            if ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose ps | grep -q 'frontend.*Up'"; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Container failed to become healthy within 30 seconds"
              ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose logs frontend"
              exit 1
            fi
            sleep 1
          done
