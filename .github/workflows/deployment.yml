name: Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string
        default: 'latest'
  repository_dispatch:
    types:
      - deployment

jobs:
  check-tests:
    name: Check if tests passed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Check test status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Check if tests have passed for this specific commit
            gh run list --workflow=test.yml --branch=master --status=success --limit=1 --commit=${{ github.sha }}
            if [ $? -ne 0 ]; then
              echo "Tests have not passed for commit ${{ github.sha }}. Deployment blocked."
              exit 1
            fi
          fi

      - name: Print last failed test run
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Last 5 test runs:"
          gh run list --workflow=test.yml --limit=5
          echo "Detailed logs of the last failed run:"
          LAST_FAILED_RUN=$(gh run list --workflow=test.yml --status=failure --limit=1 --json databaseId --jq '.[0].databaseId')
          if [ ! -z "$LAST_FAILED_RUN" ]; then
            gh run view $LAST_FAILED_RUN --log
          fi

  docker-push:
    name: Push Docker image to GHCR
    needs: check-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.event.inputs.version || steps.package-version.outputs.version }}
            type=raw,value=latest
            type=sha,format=short

      - name: Show tags before push
        run: |
          echo "Tags that will be applied:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Current images and their tags:"
          docker images ghcr.io/${{ github.repository }} --format "{{.ID}} {{.Repository}}:{{.Tag}}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show tags after push
        run: |
          echo "Images and their tags after push:"
          docker images ghcr.io/${{ github.repository }} --format "{{.ID}} {{.Tag}}"

  deploy-to-nas:
    name: Deploy to NAS
    needs: [docker-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CI_DEPLOY_NAS_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host cinas-ext\n  HostName ${{ secrets.NAS_HOST }}\n  Port ${{ secrets.NAS_PORT }}\n  User ${{ secrets.NAS_USER }}\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Setup NAS directories
        run: |
          # Create base directory with proper permissions
          ssh cinas-ext "mkdir -p ${{ secrets.NAS_FRONTEND_PATH }} && chmod 755 ${{ secrets.NAS_FRONTEND_PATH }}"

          # Create nginx configuration directory and logs directory
          ssh cinas-ext "mkdir -p ${{ secrets.NAS_FRONTEND_PATH }}/nginx/logs && chmod 755 ${{ secrets.NAS_FRONTEND_PATH }}/nginx/logs"

      - name: Check nginx configuration
        run: |
          if [ ! -f "nginx.conf" ]; then
            echo "Error: nginx.conf file is missing in the repository"
            exit 1
          fi

      - name: Check Docker version on NAS
        run: |
          DOCKER_VERSION=$(ssh cinas-ext '/usr/local/bin/docker --version')
          echo "Docker version on NAS: $DOCKER_VERSION"
          if ! ssh cinas-ext '/usr/local/bin/docker info >/dev/null 2>&1'; then
            echo "Docker daemon is not running on NAS"
            exit 1
          fi

      - name: Deploy frontend container
        run: |
          # Function to check SSH command status
          check_ssh_status() {
            if [ $? -ne 0 ]; then
              echo "Error executing SSH command: $1"
              echo "Last command failed: $2"
              exit 1
            fi
          }

          # Create network if it doesn't exist
          echo "Creating network if it doesn't exist..."
          ssh cinas-ext "/usr/local/bin/docker network inspect billmate-network >/dev/null 2>&1 || /usr/local/bin/docker network create billmate-network"
          check_ssh_status "Network creation" "docker network inspect/create"

          # Backup current docker-compose.yml if it exists
          echo "Backing up docker-compose.yml..."
          ssh cinas-ext "if [ -f ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml ]; then cp ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml.backup; fi"
          check_ssh_status "Backup creation" "cp docker-compose.yml"

          # Copy docker-compose.yml
          echo "Copying docker-compose.yml to NAS..."
          cat docker-compose.yml | ssh cinas-ext "cat > ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml"
          check_ssh_status "File copy" "cat docker-compose.yml"

          # Update image in docker-compose.yml
          echo "Updating image in docker-compose.yml..."
          REPO=\"$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')\"
          ssh cinas-ext "sed -i 's|image: .*|image: ghcr.io/${REPO}:${VERSION}|' ${{ secrets.NAS_FRONTEND_PATH }}/docker-compose.yml"
          check_ssh_status "Image update" "sed image"

          # Copy nginx configuration
          echo "Copying nginx configuration..."
          cat nginx.conf | ssh cinas-ext "cat > ${{ secrets.NAS_FRONTEND_PATH }}/nginx/default.conf"
          check_ssh_status "Nginx config copy" "cat nginx.conf"

          # Verify nginx configuration exists on NAS
          echo "Verifying nginx configuration..."
          ssh cinas-ext "test -f ${{ secrets.NAS_FRONTEND_PATH }}/nginx/default.conf"
          check_ssh_status "Nginx config verification" "test -f nginx/default.conf"

          # Create .env file from secrets
          echo "Creating .env file..."
          ssh cinas-ext "cat <<EOF > ${{ secrets.NAS_FRONTEND_PATH }}/.env
          VITE_BASE_API_URL=\"${{ secrets.FRONTEND_API_URL }}\"
          FRONTEND_PORT=\"3000\"
          EOF"
          check_ssh_status "Env file creation" "cat > .env"

          # Check if deployment is possible
          echo "Checking if deployment is possible..."
          if ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose ps | grep -q 'frontend'"; then
            echo "Frontend is already running. Proceeding with deployment..."
          else
            echo "No frontend is currently running. Proceeding with fresh deployment..."
          fi

          # Stop the current container, deploy new one, and clean up
          echo "Stopping current container, deploying new one, and cleaning up..."
          ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && \
            REPO=\"$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')\" && \
            VERSION=\"${{ github.event.inputs.version || steps.package-version.outputs.version }}\" && \
            # Stop any existing frontend container
            /usr/local/bin/docker-compose down && \
            # Update docker-compose.yml to use specific version instead of latest
            sed -i \"s|image: .*|image: ghcr.io/\${REPO}:\${VERSION}|\" docker-compose.yml && \
            # Pull and start the new container
            /usr/local/bin/docker-compose up -d && \
            # Clean up unused containers of the same type
            /usr/local/bin/docker container prune -f && \

            # Clean up old images while preserving the latest one
            /usr/local/bin/docker images \"ghcr.io/\${REPO}\" --format '{{.Repository}}:{{.Tag}}' | \
            grep -v \"\${VERSION}\" | \
            xargs -r /usr/local/bin/docker rmi && \

            # Clean up dangling images specific to this repository
            /usr/local/bin/docker images --filter "dangling=true" --format '{{.ID}} {{.Repository}}' | \
            grep \"ghcr.io/\${REPO}\" | \
            awk '{print $1}' | \
            xargs -r /usr/local/bin/docker rmi"
          check_ssh_status "Container deployment" "docker-compose up"

          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          for i in {1..30}; do
            if ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose ps | grep -q 'frontend.*Up'"; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Container failed to become healthy within 30 seconds"
              ssh cinas-ext "cd ${{ secrets.NAS_FRONTEND_PATH }} && /usr/local/bin/docker-compose logs frontend"
              exit 1
            fi
            sleep 1
          done
